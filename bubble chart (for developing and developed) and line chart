#linechartDoctorpharmacist
# Importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import pycountry_convert as pc

# Read data from CSV files
medDoc = pd.read_csv('medicalDoctors.csv')
pharm = pd.read_csv('phharmacists.csv')

# Merge doctor and pharmacist data
medProf = medDoc.merge(pharm, on=['Location', 'Period'], how='inner')

# Calculate total density
medProf['Total Density'] = medProf['First Tooltip_x'] + medProf['First Tooltip_y']

# Drop unnecessary columns
columns_to_drop = ['Indicator_x', 'Indicator_y']
medProf = medProf.drop(columns=columns_to_drop)

# Rename the columns
medProf = medProf.rename(columns={'First Tooltip_x': 'Doctors Density','First Tooltip_y': 'Pharmacists Density' })

# Function to get continent from country
def get_continent(country):
    try:
        country_code = pc.country_name_to_country_alpha2(country)
        continent_code = pc.country_alpha2_to_continent_code(country_code)
        continent = pc.convert_continent_code_to_continent_name(continent_code)
        return continent
    except:
        return None

# Aggregate data by continent
medProf['Continent'] = medProf['Location'].apply(get_continent)
continent_medProf = medProf.groupby(['Continent', 'Period']).agg({
    'Total Density': 'mean'
}).reset_index()
# Filter data for specific years
years_to_plot = [1990, 1995, 2000, 2005, 2010, 2015, 2018]
continent_medProf_filtered = continent_medProf[continent_medProf['Period'].isin(years_to_plot)]

# Plotting scatterplot with lines connecting the dots
fig, ax = plt.subplots(figsize=(12, 9))

# Iterate over continents
for continent, data in continent_medProf_filtered.groupby('Continent'):
    ax.plot(data['Period'], data['Total Density'], marker='o', label=continent)

# Adding labels and title
ax.set_xlabel('Year')
ax.set_ylabel('Total Density')
ax.set_title('Total Density of Doctors and Pharmacists by Continent')
ax.legend()

# Set x-ticks to match the selected years
ax.set_xticks(years_to_plot)

# Show plot
plt.tight_layout()
plt.show()
medProf['Continent'] = medProf['Location'].apply(get_continent)
continent_medProf = medProf.groupby(['Continent', 'Period']).agg({
    'Total Density': 'mean'
}).reset_index()
# Filter data for specific years
years_to_plot = [1990, 1995, 2000, 2005, 2010, 2015, 2018]
continent_medProf_filtered = continent_medProf[continent_medProf['Period'].isin(years_to_plot)]

# Plotting scatterplot with lines connecting the dots
fig, ax = plt.subplots(figsize=(12, 9))

# Iterate over continents
for continent, data in continent_medProf_filtered.groupby('Continent'):
    ax.plot(data['Period'], data['Total Density'], marker='o', label=continent)

# Adding labels and title
ax.set_xlabel('Year')
ax.set_ylabel('Total Density')
ax.set_title('Total Density of Doctors and Pharmacists by Continent')
ax.legend()

# Set x-ticks to match the selected years
ax.set_xticks(years_to_plot)

# Show plot
plt.tight_layout()
plt.show()


#linechartExpectancy
# Importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import pycountry_convert as pc

# Read data from CSV file
life_expectancy = pd.read_csv('expectancy.csv')

# Function to get continent from country
def get_continent(country):
    try:
        country_code = pc.country_name_to_country_alpha2(country)
        continent_code = pc.country_alpha2_to_continent_code(country_code)
        continent = pc.convert_continent_code_to_continent_name(continent_code)
        return continent
    except:
        return None

# Aggregate data by continent
life_expectancy['Continent'] = life_expectancy['Location'].apply(get_continent)
continent_life_expectancy = life_expectancy.groupby(['Continent', 'Period']).agg({
    'First Tooltip': 'mean'
}).reset_index()

# Filter data for specific years
years_to_plot = [2000, 2010, 2015, 2019]
continent_life_expectancy_filtered = continent_life_expectancy[continent_life_expectancy['Period'].isin(years_to_plot)]

# Plotting scatterplot with lines connecting the dots
fig, ax = plt.subplots(figsize=(12, 9))

# Iterate over continents
for continent, data in continent_life_expectancy_filtered.groupby('Continent'):
    ax.plot(data['Period'], data['First Tooltip'], marker='o', label=continent)

# Adding labels and title
ax.set_xlabel('Year')
ax.set_ylabel('Life Expectancy')
ax.set_title('Life Expectancy by Continent')
ax.legend()

# Set x-ticks to match the selected years
ax.set_xticks(years_to_plot)

# Show plot
plt.tight_layout()
plt.show()

#bubblechartDoctorpharmacist
import pandas as pd
import plotly.express as px

# Read data from CSV files and filter for the year 2018
doctor_data = pd.read_csv('doctors.csv')
doctor_data = doctor_data[doctor_data['Period'] == 2018]

pharmacist_data = pd.read_csv('pharmarcist.csv')
pharmacist_data = pharmacist_data[pharmacist_data['Period'] == 2018]

# Merge doctor and pharmacist data
medProf = doctor_data.merge(pharmacist_data, on=['Location', 'Period'], how='inner')

# Calculate total density
medProf['Total Density'] = medProf['First Tooltip_x'] + medProf['First Tooltip_y']

# Drop unnecessary columns
columns_to_drop = ['Indicator_x', 'Indicator_y']
medProf = medProf.drop(columns=columns_to_drop)

# Rename the columns
medProf = medProf.rename(columns={'First Tooltip_x': 'Doctors Density', 'First Tooltip_y': 'Pharmacists Density'})

# Plot bubble world map for total density of doctors and pharmacists
fig = px.scatter_geo(
    medProf,
    locations="Location",
    locationmode='country names',
    color="Location",
    size="Total Density",
    hover_name="Location",
    projection="natural earth",
    title="Total Density of Doctors and Pharmacists in 2018",
)

fig.show()

#bubblechartexpectancy
import pandas as pd
import plotly.express as px

# Read data from CSV file
df = pd.read_csv('expectancy.csv')

# Filter data for the year 2019
filtered_data = df[df['Period'] == 2019]

# Plot bubble world map
fig = px.scatter_geo(
    filtered_data,  # DataFrame
    locations="Location",
    locationmode='country names',
    color="Location",
    size="First Tooltip",  # Adjust size based on life expectancy for both sexes
    hover_name="Location",
    projection="natural earth",
    title="Life Expectancy for All Countries in 2019",
)

fig.show()
